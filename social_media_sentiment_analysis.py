# -*- coding: utf-8 -*-
"""Social Media Sentiment Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DcsA88SRdcF39Np8g_KX7iqmRC01o9aO

**Load the Dataset**
"""

import pandas as pd

# Load the dataset
file_path = '/content/sample_data/Twitter_Data.csv'
df = pd.read_csv(file_path)

# Display the first few rows of the dataframe
df.head()

"""**Text Preprocessing**"""

import re
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import nltk
import pandas as pd

# Download NLTK resources
nltk.download('stopwords')
nltk.download('punkt')

# Load the dataset, ensuring the column with the text data is named correctly
file_path = '/content/sample_data/Twitter_Data.csv'
df = pd.read_csv(file_path)

# Check the actual column names in your DataFrame
print(df.columns)

# Function to preprocess text
def preprocess_text(text):
    # Handle potential non-string values
    if not isinstance(text, str):
        text = str(text)  # Convert to string if it's not already

    text = text.lower()  # Lowercase text
    text = re.sub(r'http\S+|www\S+|https\S+', '', text, flags=re.MULTILINE)  # Remove URLs
    text = re.sub(r'\@w+|\#','', text)  # Remove mentions and hashtags
    text = re.sub(r'[^a-zA-Z]', ' ', text)  # Remove non-alphabetic characters
    tokens = word_tokenize(text)  # Tokenize text
    filtered_words = [word for word in tokens if word not in stopwords.words('english')]  # Remove stopwords
    return ' '.join(filtered_words)

# Replace 'clean_text' with the correct name of the column containing the text data
df['cleaned_text'] = df['clean_text'].apply(preprocess_text)  # Update with the correct column name

# Display the first few rows of the dataframe with cleaned text
df.head()

"""**Sentiment Analysis with TextBlob**"""

from textblob import TextBlob

# Function to get sentiment
def get_sentiment(text):
    blob = TextBlob(text)
    sentiment = blob.sentiment.polarity
    if sentiment > 0:
        return 'positive'
    elif sentiment < 0:
        return 'negative'
    else:
        return 'neutral'

# Apply sentiment analysis
df['sentiment'] = df['cleaned_text'].apply(get_sentiment)

# Display the first few rows with sentiment
df.head()

"""**Advanced Analysis with Machine Learning**"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Vectorize the text data
vectorizer = TfidfVectorizer(max_features=1000)
X = vectorizer.fit_transform(df['cleaned_text']).toarray()
y = df['sentiment']

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Naive Bayes classifier
model = MultinomialNB()
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print(f'Classification Report:\n{report}')